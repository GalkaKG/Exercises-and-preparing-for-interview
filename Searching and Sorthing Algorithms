Linear search
--------------
- finds a particular value in a list
- Checking every one of the elements
- One at a time, in sequence
- Until the desired one is found
- Worst & average performance: O(n)
Pseudo code:
for each item in the list:
    if that item has the desired value,
        return the item's location
    return nothing

Binary search
--------------
- finds an item within an ordered data structure
- At each step, compare the input with the middle element
- The algorithm repeats its action to the left or right sub-structure
- Average performance: O(log(n))
Example Code:
def binary_search(arr, target):
    left, right = 0, len(arr) - 1
    
    while left <= right:
        mid = (left + right) // 2
        
        if arr[mid] == target:
            return mid  # Element found at index mid
        elif arr[mid] < target:
            left = mid + 1  # Search in the right half
        else:
            right = mid - 1  # Search in the left half
    
    return -1  # Element not found

# Example usage
if __name__ == "__main__":
    sorted_array = [2, 4, 6, 8, 10, 12, 14, 16, 18, 20]
    target = 10
    index = binary_search(sorted_array, target)
    
    if index != -1:
        print(f"Element {target} found at index {index}.")
    else:
        print(f"Element {target} not found in the array.")


Selection Sort
---------------
- simple, but inefficient algorithm
- Swap the first with the min element on the right, then the second, etc.
- Memory: O(1)
- Time: O(n2)
- Stable: No
- Method: Selection
Example Code:
def selection_sort(arr):
    n = len(arr)
    
    for i in range(n - 1):
        min_index = i
        
        # Find the index of the minimum element in the unsorted portion
        for j in range(i + 1, n):
            if arr[j] < arr[min_index]:
                min_index = j
        
        # Swap the minimum element with the first element of the unsorted portion
        arr[i], arr[min_index] = arr[min_index], arr[i]

# Example usage
if __name__ == "__main__":
    unsorted_array = [64, 34, 25, 12, 22, 11, 90]
    selection_sort(unsorted_array)
    print("Sorted array:", unsorted_array)



QuickSort
----------
- efficient sorting algorithm
- Choose a pivot; move smaller elements left & larger right; sort left & right
- Memory: O(log(n)) stack space (recursion)
- Time: O(n2) when the pivot element divides the array into two unbalanced sub-arrays (huge difference in size)
- Stable: Depends
- Method: Partitioning

Code exaple:
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quick_sort(left) + middle + quick_sort(right)

# Example usage
unsorted_list = [3, 6, 8, 10, 1, 2, 1]
sorted_list = quick_sort(unsorted_list)
print(sorted_list)


Merge Sort
-----------
- Merge sort is efficient sorting algorithm 
- Divide the list into sub-lists (typically 2 sub-lists)
    1. Sort each sub-list (recursively call merge-sort)
    2. Merge the sorted sub-lists into a single list
- Memory: O(n) / O(n*log(n))
- Time: O(n*log(n))
- Highly parallelizable on multiple cores / machines -> up to O(log(n))

Code exaple:
def merge_arrays(left, right):
    result = [None] * (len(left) + len(right))
    left_idx = 0
    right_idx = 0
    result_idx = 0

    while left_idx < len(left) and right_idx < len(right):
        if left[left_idx] < right[right_idx]:
            result[result_idx] = left[left_idx]
            left_idx += 1
        else:
            result[result_idx] = right[right_idx]
            right_idx += 1
        result_idx += 1

    while left_idx < len(left):
        result[result_idx] = left[left_idx]
        left_idx += 1
        result_idx += 1

    while right_idx < len(right):
        result[result_idx] = right[right_idx]
        right_idx += 1
        result_idx += 1

    return result


def merge_sort(nums):
    if len(nums) == 1:
        return nums

    mid_idx = len(nums) // 2
    left = nums[:mid_idx]
    right = nums[mid_idx:]

    return merge_arrays(merge_sort(left), merge_sort(right))


nums = [int(x) for x in input().split()]
result = merge_sort(nums)
print(*result, sep=" ")
