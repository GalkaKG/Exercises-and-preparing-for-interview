QuickSort
----------
- efficient sorting algorithm
- Choose a pivot; move smaller elements left & larger right; sort left & right
- Memory: O(log(n)) stack space (recursion)
- Time: O(n2) when the pivot element divides the array into two unbalanced sub-arrays (huge difference in size)
- Stable: Depends
- Method: Partitioning

Code exaple:
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[len(arr) // 2]
    left = [x for x in arr if x < pivot]
    middle = [x for x in arr if x == pivot]
    right = [x for x in arr if x > pivot]
    
    return quick_sort(left) + middle + quick_sort(right)

# Example usage
unsorted_list = [3, 6, 8, 10, 1, 2, 1]
sorted_list = quick_sort(unsorted_list)
print(sorted_list)


Merge Sort
-----------
- Merge sort is efficient sorting algorithm 
- Divide the list into sub-lists (typically 2 sub-lists)
    1. Sort each sub-list (recursively call merge-sort)
    2. Merge the sorted sub-lists into a single list
- Memory: O(n) / O(n*log(n))
- Time: O(n*log(n))
- Highly parallelizable on multiple cores / machines -> up to O(log(n))

Code exaple:
def merge_arrays(left, right):
    result = [None] * (len(left) + len(right))
    left_idx = 0
    right_idx = 0
    result_idx = 0

    while left_idx < len(left) and right_idx < len(right):
        if left[left_idx] < right[right_idx]:
            result[result_idx] = left[left_idx]
            left_idx += 1
        else:
            result[result_idx] = right[right_idx]
            right_idx += 1
        result_idx += 1

    while left_idx < len(left):
        result[result_idx] = left[left_idx]
        left_idx += 1
        result_idx += 1

    while right_idx < len(right):
        result[result_idx] = right[right_idx]
        right_idx += 1
        result_idx += 1

    return result


def merge_sort(nums):
    if len(nums) == 1:
        return nums

    mid_idx = len(nums) // 2
    left = nums[:mid_idx]
    right = nums[mid_idx:]

    return merge_arrays(merge_sort(left), merge_sort(right))


nums = [int(x) for x in input().split()]
result = merge_sort(nums)
print(*result, sep=" ")
